syntax = "proto3";

enum ActorType {
    // 角色种类
    ACTOR = 0;
    PLAYER = 1;
    NPC = 2;  // 友好的NPC
}

enum ItemType{
    // 物品种类
    EQUIPMENT = 0;
    CONSUMABLE = 1;  // 消耗品
    MATERIAL = 2;  // 材料
}

message ActorAttr {
    string actor_id = 1;
    string actor_name = 2;
    ActorType actor_type = 3;
}

message NumericAttr {
    int32 level = 1;
    int32 hp = 2;
    int32 mp = 3;
    int32 physical_damage = 6;
    int32 magical_damage = 7;
    int32 physical_defence = 8;
    int32 magical_defence = 9;
    int32 speed = 10;
}

enum TaskCombatState {
    WIN = 0;
    LOSE = 1;
    UNKNOWN = 2;
}

message RunningTask {
    string task_id = 1;
    int32 curr_index = 2;
    string assigned_npcid = 3;
    TaskCombatState combat_state = 4;
}

message TeamInfo {
    string team_id = 1;
    repeated string members = 2;  // members ids
}

enum BuffType {
    // including all BUFF and DEBUFF
    // 禁锢等也做进来
    TREATMENT = 0;   // 回血
    HAEMORRHAGE = 1;  // 出血
}

message BuffSituation {
    BuffType buff_type = 1;
    string skill_id = 2;
    int32 remain_time = 3;
    int32 damage = 4;
}

message CombatInfo {
    string combat_id = 1;
    NumericAttr combat_numeric = 2;  // 战斗态
    float turn_time_left = 3;  // 当前行动条还剩余多少时间
    repeated BuffSituation buff_situations = 4;  // 角色身上正携带的buff信息
}

message LearnedSkill {
    string skill_id = 1;
    int32 curr_skill_level = 2;
}

enum MoreInfoType {
    REWARD = 0;
}

message MoreInfo {
    MoreInfoType info_type = 1;
    string info_content = 2;
    string info_amount = 3;
}

message PlayerAttr {
    ActorAttr basic_attr = 1;
    NumericAttr numeric_attr = 2;  // 常态
    int32 exp = 4;
    int32 gold = 14;
    int32 skill_points = 15;  // 技能点
    repeated LearnedSkill learned_skills = 16;  // 已学技能
    repeated string standby_tasks = 17;  // 可接任务
    repeated RunningTask running_tasks = 18;  // 正在进行任务
    repeated string finished_tasks = 19;  // 已完成任务
    repeated string knew_npcids = 20;  // 已经知道的npc，这将影响界面显示
    string owned_team_id = 21;  // 所属队伍ID
    CombatInfo combat_info = 23;
    repeated MoreInfo more_info = 22;  // 其他信息，包括战斗、任务获得，主要用于文本展示
}

enum ChoiceStandard {
    // 选择标准
    SPEED = 0;  // 速度
    PHYSICALDEFENCE = 1;  // 物理防御
    MAGICALDEFENCE = 2;   // 法术防御
    HP = 3;
    MP = 4;
}

enum ChoiceLevel {
    // 选择极限
    HIGHEST = 0;
    LOWEST = 1;
}

message NPCCombatOrder {
    string action_id = 1;
    ChoiceStandard choice_standard = 2;  // 选择目标的标准
    ChoiceLevel choice_level = 3;
    ActorType choice_team = 4;
}

message NPCCombatPlan {
    NumericAttr numeric_attr = 1;
    repeated LearnedSkill learned_skills = 2;  // 已学技能
    repeated NPCCombatOrder combat_orders = 3;  // 出招顺序
    int32 combat_order_index = 4;
}

message NPCAttr {
    ActorAttr basic_attr = 1;
    repeated NPCCombatPlan combat_plans = 2;
    // the below things are none at the first time.
    NumericAttr numeric_attr = 3;
    repeated LearnedSkill learned_skills = 4;  // 已学技能
    repeated NPCCombatOrder combat_orders = 5;  // 出招顺序
    int32 combat_order_index = 6;
    CombatInfo combat_info = 7;
    // 仅用于客户端，因为服务端都是有独立的组件完成各自功能；
    repeated string owned_tasks = 8;  // 所属任务，保存ids，用于检索当前player可接任务，供对应窗口、按钮显示
    repeated string owned_functions = 9;  // 所属其他功能，可能涉及：买卖系统物品、点技能等；
    string owned_team_id = 10;
}

enum SkillType {
    // 技能派系
    WITCH = 0;  // 巫
    CONFUCIANISM = 1;  // 儒
    TAOISM = 2;  // 道
    BRUTE = 3;  // 力
}

enum DamageType {
    // 伤害类型
    PHYSICAL = 0;
    MAGICAL = 1;
    BUFF = 2;
    DEBUFF = 3;
}

message SkillAttr {
    // 技能节点
    string skill_id = 1;  // 以巫术为例：SWxxx
    string skill_name = 2;
    string skill_desc = 3;  // description
    int32 max_skill_level = 4;
    SkillType skill_type = 5;
    BuffType buff_type = 6;  // not only buff but also debuff
    DamageType damage_type = 7;  // damage type, such as physical and magical
    repeated string damage = 8;  // damage value
    int32 duration = 9;  // skill state duration, a seconds int.
    repeated string preconditions = 10;  // preconditions when someone want to learn the skill, holding IDs
}

enum TaskTriggerConditionsType {
    LEVEL = 0;
    PRETASK = 1;
}

message TaskTriggerConditions {
    TaskTriggerConditionsType tc_type = 1;  // level, pretask
    string tc_content = 2;
}

enum TaskRewardType {
    SKILLPOINTS = 0;  // 技能点
    EXP = 1;  // 经验
    GOLD = 2;  // 金币
    ITEMS = 3;  // 物品
    NEWNPC = 4;  // 完成某些任务时，可能会触发新的NPC
}

message TaskReward {
    TaskRewardType tr_type = 1;
    string tr_content = 2;
    string tr_amount = 3;  // 如果奖励item，将需要明确数量
}

enum TaskProcessType {
    DIALOGS = 0;
    COMBAT = 1;
    ITEM = 2;  // including craft
    SKILLS = 3;
    SKILLLEVELS = 4;
    LEVELS = 5;
    FIND = 7;  // 找人
}

message TaskProcess {
    TaskProcessType tp_type = 1;
    // when DIALOGS, it should be a text; when COMBAT, it should be a npc id;
    // when ITEM, it should be items ids; and so on. 
    repeated string tp_content = 2;
    int32 npc_combatplan_index = 3;
    repeated int32 items_amount = 4;
    // when COMBAT, ITEM, CRAFTING,
    // extendly give the reward standard to combat component.
    repeated TaskReward tp_reward = 10;
}

message TaskAttr {
    string task_id = 1;  // Txxx
    repeated TaskProcess task_process = 4;
    repeated TaskReward task_reward = 6;
    repeated TaskTriggerConditions trigger_conditions = 8;
    string assigned_npcid = 9;  // just at the first time for trigger
    // the below things are just used in a client editor.
    string task_name = 2;  
    string task_desc = 3;
}

enum CombatState {
    STANDBY = 0;
    RUNNING = 1;
    FINISHED = 2;
    STOP = 3;
}

// message Achievement {
//     // 成就，1.0版本暂不考虑
//     int32 achievement_id = 1;
//     string description = 2;
//     bool completed = 3;
// }

message MarketItem {
    // 交易市场单项
    int32 item_id = 1;
    int32 price = 2;
    string seller_id = 3;
}

message Synthesis {
    // 制作装备、合成消耗品
    int32 synthesis_id = 1;
    string name = 2;
    string description = 3;
    repeated SynthesisMaterial synthesis_materials = 4;
    string result = 5;
}

message SynthesisMaterial {
    // 合成材料
    Item item = 1;
    int32 amount = 2;
}

enum ItemSource {
    SYSTEM = 0;
    CRAFT = 1;
}

message Item {
    // 物品单项
    string item_id = 1;
    ItemType item_type = 2;
    ItemSource item_source = 3;
    string name = 4;
    string description = 5;
    int32 price = 6;  // 对系统售价
    // 弹性变形：当外力去掉后能恢复到原来的形状和尺寸的变形。
    // 塑性变形：当外力去掉后不能恢复到原来的形状和尺寸的变形。
    float hardness = 7;  // 硬度：金属材料在受力时抵抗弹性变形的能力。
    float strength = 8;  // 强度：金属材料在外力作用下抵抗塑性变形和断裂的能力。
    float stiffness = 9;  // 刚度：金属材料抵抗更硬的物体压入其内的能力。
    string datetime = 10;
}